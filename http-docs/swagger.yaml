basePath: /v1
definitions:
  domain.UserRole:
    enum:
    - admin
    - basic
    type: string
    x-enum-varnames:
    - Admin
    - Basic
  http.authResponse:
    properties:
      token:
        example: v2.local.Gdh5kiOTyyaQ3_bNykYDeYHO21Jg2...
        type: string
    type: object
  http.errorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  http.loginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  http.meta:
    properties:
      limit:
        example: 10
        type: integer
      skip:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  http.registerRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  http.response:
    properties:
      data: {}
      message:
        example: Success
        type: string
      success:
        example: true
        type: boolean
    type: object
  http.updateUserRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.UserRole'
        example: admin
    required:
    - email
    - name
    - password
    - role
    type: object
  http.userResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
    type: object
host: localhost
info:
  contact:
    email: isemenov@scnsoft.com
    name: Ivan Semenov
  description: This is a simple RESTful Service API written in Go using Gin web framework,
    PostgreSQL database, and Redis cache.
  title: Go Hexagon Arch POC (Proof of concept) API
  version: "1.0"
paths:
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and returns an access token if the credentials
        are valid.
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully logged in
          schema:
            $ref: '#/definitions/http.authResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Login and get an access token
      tags:
      - Users
  /v1/users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      parameters:
      - description: Skip
        in: query
        name: skip
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users displayed
          schema:
            $ref: '#/definitions/http.meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: create a new user account with default role "cashier"
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/http.registerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Register a new user
      tags:
      - Users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/http.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user's name, email, password, or role by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user request
        in: body
        name: updateUserRequest
        required: true
        schema:
          $ref: '#/definitions/http.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
